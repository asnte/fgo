using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LoveLetter1
{
    public partial class gamegamen2 : Form
    {
        public gamegamen2()
        {
            InitializeComponent();
        }

        internal string P1, P2, P3, P4, mu4, CardP; //sは後で消してもよし
        private int i = 0, j = 0, k = 0, m = 0, n = 0; // 繰り返し計算用 i j k m
        public int PlaySentaku = 0,YakuSentaku =0;
        private int pictureWide, pictureHigh;
        Sanka playover = new Sanka();
        private PictureBox[] pictures;
        private Label[] labels;
        private string[] files;
        public string[] PlayerStans = new string[4];
        public sbyte[] PlayerGetPoint = new sbyte[4];
        private byte Saisennkasiisuu = 1;
        public int TurnCounter = 1;

        //捨てられたカードを記憶していく  中身無しは18として記録
        //１〜１６の役カードを箱の中に入れる　魔術ラストを考え箱は１６個
        public int[] SuteCard = new int[16];
        //１〜１６の役カードを入力される
        //０〜１５が箱ナンバーのため注意
        public int[] Shuffle = new int[16];
        // 8個のピクチャーボックスに何が入っているか
        //(１〜１６なら役カード、１８なら空とする)　　　haichi[]に入れないが１７は裏とする
        public int[] haichi = new int[8];
        //配置されているカードが裏か表か ture=表　false =裏
        public bool[] haichiTF = new bool[8];
        card card1 = new card();
        Sub1 sub1 = new Sub1();
        heishi hei = new heishi();
        Bitmap bitmap1;
        //TurnEndCounterには何枚目のカードなのかを入力
        

        private void Form_Load(object sender, EventArgs e)
        {

            //親コントロール変更　
            #region 
            pictureBox1.Controls.Add(label1);
            pictureBox1.Controls.Add(labelPT);
            pictureBox1.Controls.Add(labelMess1);
            pictureBox1.Controls.Add(labelMess2);
            pictureBox1.Controls.Add(labelMess3);
            pictureBox1.Controls.Add(labelMess4);
            pictureBox1.Controls.Add(labelMessWaku);
            pictureBox1.Controls.Add(labelGenzai);
            pictureBox1.Controls.Add(labelPP1);
            pictureBox1.Controls.Add(labelPP2);
            pictureBox1.Controls.Add(labelPP3);
            pictureBox1.Controls.Add(labelPP4);
            pictureBox1.Controls.Add(labelPPP1);
            pictureBox1.Controls.Add(labelPPP2);
            pictureBox1.Controls.Add(labelPPP3);
            pictureBox1.Controls.Add(labelPPP4);
            pictureBox1.Controls.Add(labelYama);
            pictureBox1.Controls.Add(pictureBoxT2);
            pictureBox1.Controls.Add(pictureBoxT3);
            pictureBox1.Controls.Add(pictureBoxT4);
            pictureBox1.Controls.Add(pictureBoxC1);
            pictureBox1.Controls.Add(pictureBoxC2);
            pictureBox1.Controls.Add(pictureBoxC3);
            pictureBox1.Controls.Add(pictureBoxC4);
            pictureBox1.Controls.Add(pictureBoxC5);
            pictureBox1.Controls.Add(pictureBoxC6);
            pictureBox1.Controls.Add(pictureBoxC7);
            pictureBox1.Controls.Add(pictureBoxC8);
            #endregion

            Sanka player = new Sanka();
            PlayerStans[0] = "1 " + P1;
            PlayerStans[1] = "2 " + P2;
            PlayerStans[2] = "3 " + P3;
            PlayerStans[3] = "4 " + P4;
            createCards(ref Shuffle);
            pictures = new PictureBox[] { pictureBoxC1, pictureBoxC2, pictureBoxC3, pictureBoxC4,
            pictureBoxC5,pictureBoxC6,pictureBoxC7,pictureBoxC8};
            //ファイル名を配列として取得
            files = System.IO.Directory.GetFiles(CardP, "*.png", System.IO.SearchOption.AllDirectories);
            //Player表示を回転してピクチャ化実行
            for (i = 0; i < 4; i++)
            {
                //表示する文字列
                string s = PlayerStans[i];

                if (i == 1)
                    kaitenn(s, 0, 0, i, 90);
                else if (i == 2)
                    kaitenn(s, -130, -20, i, 180);
                else if (i == 3)
                    kaitenn(s, -150, -25, i, 270);
                else
                    label1.Text = s;

            }

            //初期カード配置
            #region
            //haichiの初期値入力
            for (i = 0; i < 8; i++)
            {
                haichi[i] = 18;
                haichiTF[i] = false;
            }

            //捨てカードの初期値入力
            for (i = 0; i < 16; i++)
            {
                SuteCard[i] = 18;
            }


            //カードを初期表示
            for (i = 0; i < 4; i++)
            {
                int j = hennkann(i);
                hyouji(8, i * 2);
                //haichi に表が何役なのか記録
                haichi[i * 2] = Shuffle[i];
            }

            haichi[1] = Shuffle[4];
            playover.DrowCounter++;
            hyouji(8, 1);  //初期状態で裏で表示する
            DaijinCheck(1);

            #endregion


        }

        private void pictureBoxC1_Click(object sender, EventArgs e)
        {
            UraOmote(0);
        }
        private void pictureBoxC2_Click(object sender, EventArgs e)
        {
            UraOmote(1);
        }
        private void pictureBoxC3_Click(object sender, EventArgs e)
        {
            UraOmote(2);
        }
        private void pictureBoxC4_Click(object sender, EventArgs e)
        {
            UraOmote(3);
        }
        private void pictureBoxC5_Click(object sender, EventArgs e)
        {
            UraOmote(4);
        }
        private void pictureBoxC6_Click(object sender, EventArgs e)
        {
            UraOmote(5);
        }
        private void pictureBoxC7_Click(object sender, EventArgs e)
        {
            UraOmote(6);
        }
        private void pictureBoxC8_Click(object sender, EventArgs e)
        {
            UraOmote(7);
        }
        //表になっているカードを使用する　２枚表ならどちらかを裏にさせる
        private void buttonTukau_Click(object sender, EventArgs e)
        {
            int m = 0, n = 0;
            DoreOmote(out m, out n);

            if (n == 1)
            {
                DialogResult result = MessageBox.Show("このカードを使用してよろしいですか？", "使用確認",
                    MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (result == DialogResult.Yes)
                {
                    SennyouFormOpen(haichi[m]);
                }
            }
            else if (n == 2)
            {
                MessageBox.Show("使用しないカードを裏にしてください");

            }

        }
        private void timer2_Tick(object sender, EventArgs e)
        {
            sub1.PlaySound(mu4);
            timer2.Stop();
        }
        private void buttonTurnEnd_Click(object sender, EventArgs e)
        {
            playover.DrowCounter++;
            playover.ZanCardCounter = 15 - playover.DrowCounter; //ドローカウンターが0〜15のため
            int winone = playover.WinOf1();
            int Cardone = playover.ZanCardOne(haichi[DoreAru(1)], haichi[DoreAru(2)], haichi[DoreAru(3)], haichi[DoreAru(4)]);

            //他のプレイヤーがいなくなることによる勝利
            if (winone != -1)
            {
                labelPT.Text = "Player" + winone.ToString() + "さんが勝ちました。";
                buttonTurnEnd.Enabled = false;
                buttonTukau.Enabled = false;
                buttonReset.Enabled = true;
                Saisennkasiisuu++;
                buttonReset.Text = Saisennkasiisuu.ToString() + "回戦目";
                hyouji(hennkann(haichi[DoreAru(winone)]), DoreAru(winone));

                if (haichi[DoreAru(winone)] == 16)
                    PlayerGetPoint[winone - 1] += 2;
                else
                    PlayerGetPoint[winone - 1] += 1;

                labelPPP1.Text = PlayerGetPoint[0].ToString() + "点";
                labelPPP2.Text = PlayerGetPoint[1].ToString() + "点";
                labelPPP3.Text = PlayerGetPoint[2].ToString() + "点";
                labelPPP4.Text = PlayerGetPoint[3].ToString() + "点";

            }
            //山札がなくなることによるショウダウン勝利
            else if (Cardone != -1 && Cardone < 100)
            {
                labelPT.Text = "Player" + Cardone.ToString() + "さんが勝ちました。";
                buttonTurnEnd.Enabled = false;
                buttonTukau.Enabled = false;
                buttonReset.Enabled = true;
                Saisennkasiisuu++;
                buttonReset.Text = Saisennkasiisuu.ToString() + "回戦目";

                if (playover.LoseState1 == true)
                    hyouji(hennkann(haichi[DoreAru(1)]), DoreAru(1));
                if (playover.LoseState2 == true)
                    hyouji(hennkann(haichi[DoreAru(2)]), DoreAru(2));
                if (playover.LoseState3 == true)
                    hyouji(hennkann(haichi[DoreAru(3)]), DoreAru(3));
                if (playover.LoseState4 == true)
                    hyouji(hennkann(haichi[DoreAru(4)]), DoreAru(4));


                if (haichi[DoreAru(Cardone)] == 16)
                    PlayerGetPoint[Cardone - 1] += 2;
                else
                    PlayerGetPoint[Cardone - 1] += 1;

                labelPPP1.Text = PlayerGetPoint[0].ToString() + "点";
                labelPPP2.Text = PlayerGetPoint[1].ToString() + "点";
                labelPPP3.Text = PlayerGetPoint[2].ToString() + "点";
                labelPPP4.Text = PlayerGetPoint[3].ToString() + "点";

            }
            //山札がなくなることによる引き分け
            else if (Cardone > 100)
            {
                labelPT.Text = "引き分けです";
                buttonTurnEnd.Enabled = false;
                buttonTukau.Enabled = false;
                buttonReset.Enabled = true;
                Saisennkasiisuu++;
                buttonReset.Text = Saisennkasiisuu.ToString() + "回戦目";

                if (playover.LoseState1 == true)
                    hyouji(hennkann(haichi[DoreAru(1)]), DoreAru(1));
                if (playover.LoseState2 == true)
                    hyouji(hennkann(haichi[DoreAru(2)]), DoreAru(2));
                if (playover.LoseState3 == true)
                    hyouji(hennkann(haichi[DoreAru(3)]), DoreAru(3));
                if (playover.LoseState4 == true)
                    hyouji(hennkann(haichi[DoreAru(4)]), DoreAru(4));

                labelPPP1.Text = PlayerGetPoint[0].ToString() + "点";
                labelPPP2.Text = PlayerGetPoint[1].ToString() + "点";
                labelPPP3.Text = PlayerGetPoint[2].ToString() + "点";
                labelPPP4.Text = PlayerGetPoint[3].ToString() + "点";

            }
            //勝利条件を満たしていないなら継続
            else
            {
                labelYama.Text = "残り" + playover.ZanCardCounter.ToString() + "枚";
                TurnCounter++;
                playover.BaliaCheck(TurnCounter);
                k = playover.TurnPlay(TurnCounter); //元のターンで誰かを確かめる
                m = playover.Killed(0, k);  //脱落者をパスした際　誰が本当のターンかを判断;
                n = DoreAru(m);

                if (n == 0)
                    i = 1;
                else if (n == 1)  //空白の方のピクチャーボックス番号をiに入力
                    i = 0;
                else if (n == 2)
                    i = 3;
                else if (n == 3)
                    i = 2;
                else if (n == 4)
                    i = 5;
                else if (n == 5)
                    i = 4;
                else if (n == 6)
                    i = 7;
                else if (n == 7)
                    i = 6;

                haichi[i] = Shuffle[playover.DrowCounter];
                hyouji(8, i);
                labelPT.Text = "Player" + m.ToString() + "のターン";
                haichiTF[i] = false;
                buttonTukau.Enabled = true;
                buttonTurnEnd.Enabled = false;
                DaijinCheck(m);                //大臣脱落→ターンエンドが押せないを防ぐため後に大臣
            }

        }
        private void buttonReset_Click(object sender, EventArgs e)
        {
            buttonReset.Enabled = false;
            buttonTukau.Enabled = true;
            TurnCounter = 1;
            playover.LoseState1 = true;
            playover.LoseState2 = true;
            playover.LoseState3 = true;
            playover.LoseState4 = true;
            playover.BaliaState1 = false;
            playover.BaliaState2 = false;
            playover.BaliaState3 = false;
            playover.BaliaState4 = false;
            playover.PassCounter = 0;
            playover.DrowCounter = 3;
            labelYama.Text = "残り１１枚";
            label11.Text = "0枚";
            label12.Text = "0枚";
            label13.Text = "0枚";
            label14.Text = "0枚";
            label15.Text = "0枚";
            label16.Text = "0枚";
            label17.Text = "0枚";
            label18.Text = "0枚";

            LabelKoushin("＿＿＿");
            LabelKoushin("＿＿＿");
            LabelKoushin("＿＿＿");
            LabelKoushin("リセットしました");


            for (i = 0; i < 8; i++)
            {
                hyouji(9, i);
            }

            createCards(ref Shuffle);
            //初期カード配置
            #region
            //haichiの初期値入力
            for (i = 0; i < 8; i++)
            {
                haichi[i] = 18;
                haichiTF[i] = false;
            }

            //捨てカードの初期値入力
            for (i = 0; i < 16; i++)
            {
                SuteCard[i] = 18;
            }


            //カードを初期表示
            for (i = 0; i < 4; i++)
            {
                int j = hennkann(i);
                hyouji(8, i * 2);
                //haichi に表が何役なのか記録
                haichi[i * 2] = Shuffle[i];
            }

            haichi[1] = Shuffle[4];
            playover.DrowCounter++;
            hyouji(8, 1);  //初期状態で裏で表示する
            DaijinCheck(1);

            #endregion

        }
        private void buttonGameOFF_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("ゲームを終了してよろしいですか？", "終了確認",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Information);
            if (result == DialogResult.Yes)
            {
                DialogResult result2 = MessageBox.Show("本当にゲームを終了してよろしいですか？", "終了確認",
                         MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (result2 == DialogResult.Yes)
                {
                    this.Dispose();

                }


            }

        }

        //入力されたカード1〜16より専用のフォームを開く
        private void SennyouFormOpen(int CardYaku16)
        {
            int Senyou = hennkann(CardYaku16);

            //兵士使用時のフォーム
            if (Senyou == 0)　　
            {
                heishi hei = new heishi();
                hei.p1 = P1;
                hei.p2 = P2;
                hei.p3 = P3;
                hei.p4 = P4;
                hei.p1seizon = playover.LoseState1;
                hei.p2seizon = playover.LoseState2;
                hei.p3seizon = playover.LoseState3;
                hei.p4seizon = playover.LoseState4;
                hei.p1Balia = playover.BaliaState1;
                hei.p2Balia = playover.BaliaState2;
                hei.p3Balia = playover.BaliaState3;
                hei.p4Balia = playover.BaliaState4;
                hei.Game = this;
                hei.Turn = playover.TurnPlay(TurnCounter);
                if (hei.ShowDialog() == DialogResult.OK)
                {
                    //PlaySentakuは１〜４でプレイヤーを返す　PlaySentaku＝-1のときはバリアによる無効状態
                    //YakuSentakuは１〜７　道化〜姫で選択された役カードの値を返す

                    if (PlaySentaku != -1) //バリア無効が効いてない状態で兵士に選択された場合
                    {
                        int mochiCardBasho = DoreAru(PlaySentaku);
                        int mochiCardYaku = hennkann(haichi[mochiCardBasho]);  

                        if (YakuSentaku == mochiCardYaku)  //当たり
                        {
                            DaturakuClear(PlaySentaku);
                            ShiyouCardClear();
                            LabelKoushin("兵士を使用した。当たりです");
                        }
                        else
                        {
                            ShiyouCardClear();  //外れ
                            LabelKoushin("兵士を使用した。外れです");
                        }

                    }
                    else if (PlaySentaku == -1) //バリア無効が効いた状態で選択（カードだけ消滅）
                    {
                        ShiyouCardClear();
                        LabelKoushin("兵士を使用したが、僧侶により打ち消された");
                    }
                }
                hei.Dispose();

            }
            //道化使用時のフォーム
            else if (Senyou == 1)　
            {
                Douke douke = new Douke();
                douke.p1 = P1;
                douke.p2 = P2;
                douke.p3 = P3;
                douke.p4 = P4;
                douke.p1seizon = playover.LoseState1;
                douke.p2seizon = playover.LoseState2;
                douke.p3seizon = playover.LoseState3;
                douke.p4seizon = playover.LoseState4;
                douke.p1Balia = playover.BaliaState1;
                douke.p2Balia = playover.BaliaState2;
                douke.p3Balia = playover.BaliaState3;
                douke.p4Balia = playover.BaliaState4;
                douke.Game = this;
                douke.Turn = playover.TurnPlay(TurnCounter);   //注目！！
                if (douke.ShowDialog() == DialogResult.OK)
                {
                    System.Threading.Thread.Sleep(2000);
                    ShiyouCardClear();
                }
                douke.Dispose();
            }
            //騎士使用時のフォーム
            else if (Senyou == 2)
            {
                KIshi kishi = new KIshi();
                kishi.p1 = P1;
                kishi.p2 = P2;
                kishi.p3 = P3;
                kishi.p4 = P4;
                kishi.p1seizon = playover.LoseState1;
                kishi.p2seizon = playover.LoseState2;
                kishi.p3seizon = playover.LoseState3;
                kishi.p4seizon = playover.LoseState4;
                kishi.p1Balia = playover.BaliaState1;
                kishi.p2Balia = playover.BaliaState2;
                kishi.p3Balia = playover.BaliaState3;
                kishi.p4Balia = playover.BaliaState4;
                kishi.Turn = playover.TurnPlay(TurnCounter);
                kishi.Game = this; 

                if (kishi.ShowDialog() == DialogResult.OK)
                {
                    //PlaySentakuは１〜４でプレイヤーを返す　-1のときはバリアによる無効状態

                    if (PlaySentaku != -1) //バリア無効が効いてない状態で兵士に選択された場合
                    {
                        int mochicardBasho = DoreAru(PlaySentaku);
                        int mynokoriCard = DoreNokori();

                        if (haichi[mochicardBasho] < haichi[mynokoriCard])  //騎士使用側の勝利
                        {
                            LabelKoushin("騎士を使用しました。" + MochiYaku(PlaySentaku) + "に勝利しました");
                            DaturakuClear(PlaySentaku);
                            ShiyouCardClear();
                        }
                        else if (haichi[mochicardBasho] > haichi[mynokoriCard]) 　//騎士使用側の敗北
                        {
                            LabelKoushin("騎士を使用しました。" + MochiYaku(playover.TurnPlay(TurnCounter)) + "で負けました。");
                            ShiyouCardClear();
                            DaturakuClear(playover.TurnPlay(TurnCounter));　//playover.TurnPlay(TurnCounter)は誰のターンかを判断
                        }

                        //騎士使用後引き分けの場合は何も起こらないのでコード記入なし

                    }
                    else if (PlaySentaku == -1) //バリア無効が効いた状態で選択（カードだけ消滅）
                    {
                        ShiyouCardClear();
                        LabelKoushin("騎士を使用したが僧侶に打ち消された");
                    }
                }
                kishi.Dispose();

            }
            //僧侶使用時のフォーム
            else if (Senyou == 3)
            {
                Souryo souryo = new Souryo();
                if (souryo.ShowDialog() == DialogResult.OK)
                {
                    playover.Balia(TurnCounter);
                    ShiyouCardClear();
                    LabelKoushin("僧侶を使用しました。");
                }
                souryo.Dispose();

            }
            //魔術師使用時のフォーム
            else if (Senyou == 4)
            {
                Majyutushi majyutushi = new Majyutushi();
                majyutushi.p1 = P1;
                majyutushi.p2 = P2;
                majyutushi.p3 = P3;
                majyutushi.p4 = P4;
                majyutushi.p1seizon = playover.LoseState1;
                majyutushi.p2seizon = playover.LoseState2;
                majyutushi.p3seizon = playover.LoseState3;
                majyutushi.p4seizon = playover.LoseState4;
                majyutushi.p1Balia = playover.BaliaState1;
                majyutushi.p2Balia = playover.BaliaState2;
                majyutushi.p3Balia = playover.BaliaState3;
                majyutushi.p4Balia = playover.BaliaState4;
                majyutushi.Game = this;
                majyutushi.Turn = playover.TurnPlay(TurnCounter);
                if (majyutushi.ShowDialog() == DialogResult.OK)
                {
                    //PlaySentakuは１〜４でプレイヤーを返す　PlaySentaku＝-1のときはバリアによる無効状態

                    if (PlaySentaku != -1) //バリア無効が効いてない状態で魔術師効果を使用した場合
                    {
                        int MochiyakuBasho = DoreAru(PlaySentaku);

                        if (haichi[MochiyakuBasho] == 16)  //姫に当たった場合　脱落を追加
                        {
                            DaturakuClear(PlaySentaku);
                            LabelKoushin("魔術師の魔法が姫に直撃！");
                            ShiyouCardClear();
                        }
                        else　//姫以外
                        {
                            SuteCardKiroku(haichi[MochiyakuBasho]);　　//捨てカードの記録
                            LabelKoushin("魔術師を使用した。" + MochiYaku(PlaySentaku) + "を捨てさせた");　//（捨てる前の）カードを捨てさせたコメント
                            playover.DrowCounter++;　//ドローカウンターを進める
                            haichi[MochiyakuBasho] = Shuffle[playover.DrowCounter];　//配置のカードを次のカードに
                            ShiyouCardClear();
                        } 

                    }
                    else if (PlaySentaku == -1) //バリア無効が効いた状態で選択（カードだけ消滅）
                    {
                        ShiyouCardClear();
                        LabelKoushin("魔術師を使用したが僧侶に打ち消された");
                    }
                }
                majyutushi.Dispose();

            }
            //将軍使用時のフォーム
            else if (Senyou == 5)
            {
                shougunn shou = new shougunn();
                shou.p1 = P1;
                shou.p2 = P2;
                shou.p3 = P3;
                shou.p4 = P4;
                shou.p1seizon = playover.LoseState1;
                shou.p2seizon = playover.LoseState2;
                shou.p3seizon = playover.LoseState3;
                shou.p4seizon = playover.LoseState4;
                shou.p1Balia = playover.BaliaState1;
                shou.p2Balia = playover.BaliaState2;
                shou.p3Balia = playover.BaliaState3;
                shou.p4Balia = playover.BaliaState4;
                shou.Turn = playover.TurnPlay(TurnCounter);
                shou.Game = this;
                if (shou.ShowDialog() == DialogResult.OK)
                {
                    //PlaySentakuは１〜４でプレイヤーを返す　-1のときはバリアによる無効状態

                    if (PlaySentaku != -1) //バリア無効が効いてない状態で将軍を使用した場合
                    {
                        int mochiyakuBasho = DoreAru(PlaySentaku);
                        int mynokoriCard = DoreNokori();

                        int ichijihozon = haichi[mochiyakuBasho];
                        haichi[mochiyakuBasho] = haichi[mynokoriCard];
                        haichi[mynokoriCard] = ichijihozon;
                        ShiyouCardClear();
                        LabelKoushin("将軍を使用しプレイヤー"+ PlaySentaku.ToString()+"とカードを交換した");
                    }
                    else if (PlaySentaku == -1) //バリア無効が効いた状態で選択（カードだけ消滅）
                    {
                        ShiyouCardClear();
                        LabelKoushin("将軍を使用したが僧侶に打ち消された");
                    }
                }
                shou.Dispose();

            }
            //大臣使用時のフォーム
            else if (Senyou == 6)
            {
                Daijin daijin = new Daijin();
                if (daijin.ShowDialog() == DialogResult.OK)
                {
                    ShiyouCardClear();
                    LabelKoushin("大臣を使用しました。");
                }
                daijin.Dispose();

            }
            //姫専用フォーム
            else if (Senyou == 7)
            {
                DialogResult result = MessageBox.Show("本当に見せるよ？", "使用確認",
                        MessageBoxButtons.YesNo, MessageBoxIcon.Information);
                if (result == DialogResult.Yes)
                {
                    Hime hime = new Hime();
                    if (hime.ShowDialog() == DialogResult.OK)
                    {

                    }

                    hime.Dispose();
                }

            }

        }

        //どれが表になっているかを判断する。
        //doreomoteは０〜７　pictureBoxCの番号
        //omotemaisuuは０〜２　を返す
        // doreomote -1の場合は表のカードなし
        private void DoreOmote(out int doreomote, out int omotemaisuu)
        {
            doreomote = -1;
            omotemaisuu = 0;

            for (int num = 0; num < 8; num++)
            {
                if (haichiTF[num] == true && haichi[num] != 18)
                {
                    doreomote = num;
                    omotemaisuu++;
                }

            }

        }

        //役使用時２枚目の残りのカードがどこにあるかを判断する
        private int DoreNokori()
        {
            int Nokori = 0;

            int mochiyaku = 0;
            int omotekazu = 0;   //今回はomotekazuは不要
            DoreOmote(out mochiyaku, out omotekazu);　　//使用中カードの判定


            if (mochiyaku == 0)             //使用中でないカードがあるPictureBox番号を返す
                Nokori = 1;　　　　// PictureBoxC1のカードが使用中ならPictureBoxC2を返す
            else if (mochiyaku == 1)　　　　//以下同様
                Nokori = 0;
            else if (mochiyaku == 2)
                Nokori = 3;
            else if (mochiyaku == 3)
                Nokori = 2;
            else if (mochiyaku == 4)
                Nokori = 5;
            else if (mochiyaku == 5)
                Nokori = 4;
            else if (mochiyaku == 6)
                Nokori = 7;
            else if (mochiyaku == 7)
                Nokori = 6;

            return Nokori;
        }
        
        //どっちのカードが存在しているかを返す
        //入力 (プレイヤー番号１〜４)　戻り値　ピクチャボックス番号０〜７　
        private int DoreAru(int PlayerNumberDoreAru)
        {
            int NokoriBasho = -1;

            if (PlayerNumberDoreAru == 1)
            {
                if (haichi[0] == 18)
                    NokoriBasho = 1;
                else
                    NokoriBasho = 0;

            }
            else if (PlayerNumberDoreAru == 2)
            {
                if (haichi[2] == 18)
                    NokoriBasho = 3;
                else
                    NokoriBasho = 2;

            }
            else if (PlayerNumberDoreAru == 3)
            {
                if (haichi[4] == 18)
                    NokoriBasho = 5;
                else
                    NokoriBasho = 4;

            }
            else if (PlayerNumberDoreAru == 4)
            {
                if (haichi[6] == 18)
                    NokoriBasho = 7;
                else
                    NokoriBasho = 6;

            }

            return NokoriBasho;

        }

        //どっちのカードが存在していないかを返す
        //入力 (プレイヤー番号１〜４)　戻り値　ピクチャボックス番号０〜７
        private int DoreNai(int PlayerNumberDoreNai)
        {
            int NaiBasho = -1;

            if (PlayerNumberDoreNai == 1)
            {
                if (haichi[0] == 18)
                    NaiBasho = 0;
                else
                    NaiBasho = 1;

            }
            else if (PlayerNumberDoreNai == 2)
            {
                if (haichi[2] == 18)
                    NaiBasho = 2;
                else
                    NaiBasho = 3;

            }
            else if (PlayerNumberDoreNai == 3)
            {
                if (haichi[4] == 18)
                    NaiBasho = 4;
                else
                    NaiBasho = 5;

            }
            else if (PlayerNumberDoreNai == 4)
            {
                if (haichi[6] == 18)
                    NaiBasho = 6;
                else
                    NaiBasho = 7;

            }

            return NaiBasho;



        }



        //(カード番号１〜１６)を因数として捨て札情報を更新する
        private void SuteCardKiroku(int CardNumber16)
        {
            int Kuuhaku = 0,heishi=0,douke=0,kishi=0,souryo=0,majyutu=0,shougun=0,
                daijin=0,hime=0;

            for (int num = 0; num < 16; num++)
            {
                if (SuteCard[num] == 18)
                    Kuuhaku++;
            }

            //空白の分だけ減らす０→１→２・・・となる
            //そこに捨てられたカードｘを入力している
            SuteCard[16-Kuuhaku] = CardNumber16;

            for (int num = 0; num < 16; num++)
            {
                if (SuteCard[num] <= 5)
                    heishi++;
                else if (SuteCard[num] <= 7)
                    douke++;
                else if (SuteCard[num] <= 9)
                    kishi++;
                else if (SuteCard[num] <= 11)
                    souryo++;
                else if (SuteCard[num] <= 13)
                    majyutu++;
                else if (SuteCard[num] <= 14)
                    shougun++;
                else if (SuteCard[num] <= 15)
                    daijin++;
                else if (SuteCard[num] <= 16)
                    hime++;

            }

            label11.Text = heishi.ToString()+"枚";
            label12.Text = douke.ToString() + "枚";
            label13.Text = kishi.ToString() + "枚";
            label14.Text = souryo.ToString() + "枚";
            label15.Text = majyutu.ToString() + "枚";
            label16.Text = shougun.ToString() + "枚";
            label17.Text = daijin.ToString() + "枚";
            label18.Text = hime.ToString() + "枚";


        }

        //表になっているカード(使用後)捨て札に移し表示をクリアにする 更新あり
        public void ShiyouCardClear()
        {
            int mochiCard = 0;
            int omotemai = 0;
            DoreOmote(out mochiCard, out omotemai);
            SuteCardKiroku(haichi[mochiCard]);
            haichi[mochiCard] = 18;
            hyouji(9, mochiCard);
            buttonTukau.Enabled = false;
            buttonTurnEnd.Enabled = true;
        }

        // （脱落者1〜４）を入力し　持っていたカードをクリアおよび　更新あり
        private void DaturakuClear(int PlayerNumber)
        {
            int mochiCardBasho = DoreAru(PlayerNumber);
            playover.Killed(PlayerNumber, 100);
            SuteCardKiroku(haichi[mochiCardBasho]);
            haichi[mochiCardBasho] = 18;
            hyouji(9, mochiCardBasho);
        }

        // (PictureBox番号０〜７)を入力しカードが表なら裏　裏なら表にする
        private void UraOmote(int CardBasho)
        {
            int MyTurn = playover.TurnPlay(TurnCounter);
            int kuuhaku = haichi[CardBasho];
            int Egala;

            if ((CardBasho == 0 || CardBasho == 1 )&& MyTurn == 1 && kuuhaku != 18)
            {
                if (haichiTF[CardBasho] == false)　//裏の場合　表にする
                {
                    Egala = card1.Open(haichi[CardBasho]);
                    haichiTF[CardBasho] = true;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);
                }
                else  //表の場合 裏にする
                {
                    Egala= card1.Close();
                    haichiTF[CardBasho] = false;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);

                }

            }
            else if ((CardBasho == 2 || CardBasho == 3) && MyTurn == 2 && kuuhaku != 18)
            {
                if (haichiTF[CardBasho] == false)　//裏の場合　表にする
                {
                    Egala = card1.Open(haichi[CardBasho]);
                    haichiTF[CardBasho] = true;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);
                }
                else  //表の場合 裏にする
                {
                    Egala = card1.Close();
                    haichiTF[CardBasho] = false;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);

                }

            }
            else if ((CardBasho == 4 || CardBasho == 5) && MyTurn == 3 && kuuhaku != 18)
            {
                if (haichiTF[CardBasho] == false)　//裏の場合　表にする
                {
                    Egala = card1.Open(haichi[CardBasho]);
                    haichiTF[CardBasho] = true;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);
                }
                else  //表の場合 裏にする
                {
                    Egala = card1.Close();
                    haichiTF[CardBasho] = false;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);

                }

            }
            else if ((CardBasho == 6 || CardBasho == 7) && MyTurn == 4 && kuuhaku != 18)
            {
                if (haichiTF[CardBasho] == false)　//裏の場合　表にする
                {
                    Egala = card1.Open(haichi[CardBasho]);
                    haichiTF[CardBasho] = true;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);
                }
                else  //表の場合 裏にする
                {
                    Egala = card1.Close();
                    haichiTF[CardBasho] = false;
                    Egala = hennkann(Egala);
                    hyouji(Egala, CardBasho);

                }

            }

        }

        // 入力 (プレイヤー番号１〜４)　戻り値　持っている役カード　兵士　姫　など
        public string MochiYaku(int PlayerNumber)
        {
            string YakuCardMei="";

            int myturn = playover.TurnPlay(TurnCounter);

            if (PlayerNumber != myturn) //自分以外のカードの役を参照するとき
            {
                int CardNumberMei = haichi[DoreAru(PlayerNumber)];

                if (CardNumberMei <= 5)
                    YakuCardMei = "兵士";
                else if (CardNumberMei <= 7)
                    YakuCardMei = "道化";
                else if (CardNumberMei <= 9)
                    YakuCardMei = "騎士";
                else if (CardNumberMei <= 11)
                    YakuCardMei = "僧侶";
                else if (CardNumberMei <= 13)
                    YakuCardMei = "魔術師";
                else if (CardNumberMei <= 14)
                    YakuCardMei = "将軍";
                else if (CardNumberMei <= 15)
                    YakuCardMei = "大臣";
                else if (CardNumberMei <= 16)
                    YakuCardMei = "姫";
            }
            else if(PlayerNumber == myturn)　//自分のカードを参照するとき
            {
                int CardNumberMei = haichi[DoreNokori()];
                if (CardNumberMei <= 5)
                    YakuCardMei = "兵士";
                else if (CardNumberMei <= 7)
                    YakuCardMei = "道化";
                else if (CardNumberMei <= 9)
                    YakuCardMei = "騎士";
                else if (CardNumberMei <= 11)
                    YakuCardMei = "僧侶";
                else if (CardNumberMei <= 13)
                    YakuCardMei = "魔術師";
                else if (CardNumberMei <= 14)
                    YakuCardMei = "将軍";
                else if (CardNumberMei <= 15)
                    YakuCardMei = "大臣";
                else if (CardNumberMei <= 16)
                    YakuCardMei = "姫";

            }

            return YakuCardMei;
        }

        // メッセージを入力し上から順に更新していく
        public void LabelKoushin(string MessGun)
        {
            labels = new Label[] { labelMess1, labelMess2, labelMess3, labelMess4 };

            labels[3].Text = labels[2].Text;
            labels[2].Text = labels[1].Text;
            labels[1].Text = labels[0].Text;
            labels[0].Text = MessGun;

        }

        //大臣による敗北のチェック（プレイヤー番号１〜４）
        public void DaijinCheck (int PlayerNumber)
        {
            bool ShokiDrow = true;

            if (haichi[PlayerNumber*2-2] == 15 || haichi[PlayerNumber*2-1] == 15) //どちらかが大臣なら１１以下かチェックする
            {
                i = hennkann(haichi[PlayerNumber*2-2]);
                j = hennkann(haichi[PlayerNumber*2-1]);
                playover.DrowCounter--;                 //DrowDaiでDrowCounterが進んでしまうため、あらかじめ減らす
                ShokiDrow = playover.DrowDai(i, j);
            }

            if (ShokiDrow == false)
            {
                haichiTF[PlayerNumber*2-2] = true;
                ShiyouCardClear();
                DaturakuClear(PlayerNumber);
                LabelKoushin("大臣との陰謀が明るみに出た");
                buttonTurnEnd.Enabled = true;
                buttonTukau.Enabled = false;
            }

        }

        //(カード役の絵、どのピクチャーボックスか) 
        //(0:兵士〜8:裏、0:(ボックス１)〜7:(ボックス8))
        //fに9が入力された時は指定ボックスの画像を消す
        private void hyouji(int CardYakuNoe, int pictureBoxPoint)
        {
            if (CardYakuNoe != 9)
            {
                bitmap1 = (Bitmap)Bitmap.FromFile(files[CardYakuNoe]);
                pictures[pictureBoxPoint].SizeMode = PictureBoxSizeMode.Zoom;
                pictures[pictureBoxPoint].Image = bitmap1;

                if (pictureBoxPoint == 0 || pictureBoxPoint == 1)
                {
                    pictures[pictureBoxPoint].Image.RotateFlip(RotateFlipType.RotateNoneFlipNone);
                    pictures[pictureBoxPoint].Refresh();
                }
                else if (pictureBoxPoint == 2 || pictureBoxPoint == 3)
                {
                    pictures[pictureBoxPoint].Image.RotateFlip(RotateFlipType.Rotate90FlipNone);
                    pictures[pictureBoxPoint].Refresh();
                }
                else if (pictureBoxPoint == 4 || pictureBoxPoint == 5)
                {
                    pictures[pictureBoxPoint].Image.RotateFlip(RotateFlipType.Rotate180FlipNone);
                    pictures[pictureBoxPoint].Refresh();
                }
                else if (pictureBoxPoint == 6 || pictureBoxPoint == 7)
                {
                    pictures[pictureBoxPoint].Image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                    pictures[pictureBoxPoint].Refresh();
                }
            }
            else
            {
                pictures[pictureBoxPoint].Image = null;
            }
        }

        //全てのカード(１〜１６+１)１７枚 ごちゃ混ぜ（裏を含む）→表示する９パターンに変換(０から８)
        //kは１〜１７　　　　　　　　　　　　　　　　jを９で返すときは画像クリア
        private int hennkann(int henkanmoto)
        {
            int CardYaku8 = 0;

            if (henkanmoto <= 5)　　　　//兵士
                CardYaku8 = 0;
            else if (henkanmoto <= 7)
                CardYaku8 = 1;
            else if (henkanmoto <= 9)
                CardYaku8 = 2;
            else if (henkanmoto <= 11)
                CardYaku8 = 3;
            else if (henkanmoto <= 13)　//魔術師
                CardYaku8 = 4;
            else if (henkanmoto <= 14)
                CardYaku8 = 5;
            else if (henkanmoto == 15)　//大臣
                CardYaku8 = 6;
            else if (henkanmoto == 16)  //姫
                CardYaku8 = 7;
            else if (henkanmoto == 17)
                CardYaku8 = 8;
            else if (henkanmoto == 18)
                CardYaku8 = 9;

            return CardYaku8;

        }

        //カードを生成しシャッフル
        private void createCards(ref int[] Shuffle)
        {
            Random r = new Random();
            int num = 15;
            int[] Shokichi = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 };

            while (num > 0)
            {
                int w = r.Next(0, num);
                int s = Shokichi[num];
                Shokichi[num] = Shokichi[w];
                Shokichi[w] = s;
                num--;
            }

            for (int num2 = 0; num2 < 16; num2++)
            {
                Shuffle[num2] = Shokichi[num2];
            }

        }

        //文字を回転し写真として貼るルーチン
        //(文字,座標X,座標Y,Player番号,回転角°)
        private void kaitenn(string moji, int ZhyouX, int ZhyouY, int PlayerNumber, int round)
        {
            if (PlayerNumber == 1)
            {
                pictureWide = pictureBoxT2.Width;
                pictureHigh = pictureBoxT2.Height;
            }
            else if (PlayerNumber == 2)
            {
                pictureWide = pictureBoxT3.Width;
                pictureHigh = pictureBoxT3.Height;
            }
            else if (PlayerNumber == 3)
            {
                pictureWide = pictureBoxT4.Width;
                pictureHigh = pictureBoxT4.Height;
            }

            Bitmap canvas = new Bitmap(pictureWide, pictureHigh);
            //ImageオブジェクトのGraphicsオブジェクトを作成する
            Graphics g = Graphics.FromImage(canvas);
            //座標(30, 10)に描画するため、ワールド変換を平行移動
            g.TranslateTransform(30, 10);
            //round の分だけ回転
            g.RotateTransform(round);
            //使用するFontオブジェクトを作成
            Font fnt = new Font("MS UI Gothic", 16, FontStyle.Bold);
            //文字列を(x, y)に描画
            g.DrawString(moji, fnt, Brushes.White, ZhyouX, ZhyouY);
            //PictureBox1に表示する
            if (PlayerNumber == 1)
            {
                pictureBoxT2.Image = canvas;
            }
            else if (PlayerNumber == 2)
            {
                pictureBoxT3.Image = canvas;
            }
            else if (PlayerNumber == 3)
            {
                pictureBoxT4.Image = canvas;
            }
            //リソース開放
            fnt.Dispose();
            g.Dispose();
        }

    }
}